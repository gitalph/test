syntax = "proto3";

package repository;

import "google/protobuf/wrappers.proto";

// Item-related messages
message Item {
  string market_hash_name = 1;
  google.protobuf.Int64Value min_price = 2;            // stored value in cents
  google.protobuf.Int64Value tradable_min_price = 3;     // stored value in cents
}

message GetItemsRequest {
  int32 offset = 1;
  int32 limit = 2;
}

message GetItemsResponse {
  repeated Item items = 1;
  int32 total = 2;
}

message UpdateItemsRequest {
  repeated Item items = 1; // List of items to be updated
}

message UpdateItemsResponse {
  string message = 1;
}

// User-related messages
message GetUserRequest {
  int32 userId = 1;
}

message GetUserResponse {
  int32 id = 1;
  string username = 2;
  string email = 3;
  float balance = 4;
  string createdAt = 5;
  string passwordHash = 6;
}

message CreateUserRequest {
  string username = 1;
  string email = 2;
  string passwordHash = 3;
}

message CreateUserResponse {
  int32 userId = 1;
}

message UpdateUserBalanceRequest {
  int32 userId = 1;
  float newBalance = 2;
}

message UpdateUserBalanceResponse {
  string message = 1;
}

message GetUserByEmailRequest {
  string email = 1;
}

message GetUserByEmailResponse {
  int32 id = 1;
  string username = 2;
  string email = 3;
  float balance = 4;
  string createdAt = 5;
  string passwordHash = 6;
}

message UpdateUserPasswordRequest {
  int32 userId = 1;
  string newPasswordHash = 2;
}

message UpdateUserPasswordResponse {
  string message = 1;
}

// Product-related messages
message GetProductRequest {
  int32 productId = 1;
}

message GetProductResponse {
  int32 id = 1;
  string name = 2;
  string description = 3;
  float price = 4;
  string createdAt = 5;
}

message CreateProductRequest {
  string name = 1;
  string description = 2;
  float price = 3;
}

message CreateProductResponse {
  int32 productId = 1;
}

message UpdateProductRequest {
  int32 productId = 1;
  string name = 2;
  string description = 3;
  float price = 4;
}

message UpdateProductResponse {
  string message = 1;
}

message DeleteProductRequest {
  int32 productId = 1;
}

message DeleteProductResponse {
  string message = 1;
}

// Purchase-related messages
message MakePurchaseRequest {
  int32 userId = 1;
  string market_hash_name = 2;
}

message MakePurchaseResponse {
  float updatedBalance = 1;
}

// Service Definition
service RepositoryService {
  // User-related RPCs
  rpc GetUser(GetUserRequest) returns (GetUserResponse);
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
  rpc UpdateUserBalance(UpdateUserBalanceRequest) returns (UpdateUserBalanceResponse);
  rpc GetUserByEmail(GetUserByEmailRequest) returns (GetUserByEmailResponse);
  rpc UpdateUserPassword(UpdateUserPasswordRequest) returns (UpdateUserPasswordResponse);

  // Product-related RPCs
  rpc GetProduct(GetProductRequest) returns (GetProductResponse);
  rpc CreateProduct(CreateProductRequest) returns (CreateProductResponse);
  rpc UpdateProduct(UpdateProductRequest) returns (UpdateProductResponse);
  rpc DeleteProduct(DeleteProductRequest) returns (DeleteProductResponse);

  // Purchase-related RPCs
  rpc MakePurchase(MakePurchaseRequest) returns (MakePurchaseResponse);

  // Item-related RPCs
  rpc GetItems(GetItemsRequest) returns (GetItemsResponse);
  rpc UpdateItems(UpdateItemsRequest) returns (UpdateItemsResponse);
}
